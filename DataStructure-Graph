class Node{
    constructor(vertexTo,weight=1){
        this.weight = weight;
        this.vertexTo = vertexTo;
    }
}

class Graph{
    constructor(){
        this.adjacencyList = {};
    }

    insert(vertex){
        this.adjacencyList[vertex] = []; //make it weighted or unweighted depencey the Node/val push to the array.
    }

    addEdge(vertexFrom,vertexTo,weight){
        //add checking if node already existed.
        if(!this.adjacencyList[vertexFrom] || !this.adjacencyList[vertexTo]) return false;
        let NodeTo = new Node(vertexTo,weight)
        let NodeFrom = new Node(vertexFrom,weight)

        //for directed graph, one add one direction, this is undirected graph.
        this.adjacencyList[vertexFrom].push(NodeTo);
        this.adjacencyList[vertexTo].push(NodeFrom);
    }

    removeEdge(vertex1,vertex2){
        this.adjacencyList[vertex1] = this.adjacencyList[vertex1].filter(v => v !== vertex2);
        this.adjacencyList[vertex2] = this.adjacencyList[vertex2].filter(v => v !== vertex1);
    }

    removeVertex(vertexRM){
        let arrV = this.adjacencyList[vertexRM];
        //loop the array of removal vertex
        for(var i = 0; i <= arrV.length - 1; i++){
            //each vertex remove vertexRM in its adjacencyList.
            this.adjacencyList[arrV[i]] = this.adjacencyList[arrV[i]].filter(v => v !== vertexRM);
        }
        //delete the vertex all together.
        delete this.adjacencyList[vertexRM]
    }

    bfs(start){
        let q = [] //queue
        let visited = {};
        let result  = [];
        let adj = this.adjacencyList;
    
        q.push(start);
        visited[start] = true;
        while(q.length){
            let v = q.shift();//fifo queue
            result.push(v);
            for(let i in adj[v]){
                let nv = adj[v][i].vertexTo;
                if(!visited[nv]) {
                    visited[nv] = true;
                    q.push(nv);
                }
            }
        }
        return result;
    }

    dfs_r(start){
        let result = [];
        let visited = {};
        let adj = this.adjacencyList;


        function dfs(v){ // each vertex.
            if(!v) return null;          
            visited[v] = true;
            result.push(v);                     //          i
                                                //          |    
            for(let i in adj[v]){               //adj[v] -> [{vertexTo, weight}]
                let nv = adj[v][i].vertexTo;
                if(!visited[nv]) dfs(nv);
            }
        }

        dfs(start);

        return result;
    }

    dfs_i(start){
        let adj = this.adjacencyList;
        let s = [] //stack
        let visited = {};
        let result = [];
        s.push(start);

        while(s.length){
            let v = s.pop();
            if(!visited[v]){
                visited[v] = true;
                result.push(v);
                for(let i in adj[v]){
                    let nv = adj[v][i].vertexTo;
                    s.push(nv);
                }
            }
        }
        return result;
    }

    dijkstra(start, finish){
        //every time we look to visit a new node, we pick the node with the smallest known distance to visit first

        //Once we've moved to the node we're going to visit, we look at each of its neighbors.

        //For each neighboring node, we calculate the distance by summing the total edges that lead to the node  we're checking from the starting node

        //If the new total distance to a node is less then the previous total, we store the new shorter distance for that node.

    }

}

let g = new Graph;
g.insert("A");
g.insert("B");
g.insert("C");
g.insert("D");
g.insert("E");
g.insert("F");
g.insert("G");

g.addEdge("A","B",1);
g.addEdge("B","C",1);
g.addEdge("C","D",1);
g.addEdge("D","E",1);
g.addEdge("D","B",1);
g.addEdge("E","F",1);
g.addEdge("F","D",1);
g.addEdge("F","A",1);
g.addEdge("F","G",1);


console.log(`dfs_r: ${g.dfs_r("B")}`);
console.log(`dfs_i: ${g.dfs_i("B")}`);
console.log(`bfs  : ${g.bfs("B")}`);
// g.removeEdge("Hong Kong","Los Angeles");
// g.removeEdge("Hong Kong","Tokyo");
// g.removeVertex("Hong Kong");