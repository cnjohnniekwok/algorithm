function pirvot(a,l,r){
    let p=a[l],s=l;

    for(var i = l+1; i <= r; i++){
        if(p.p < a[i].p){ // since the structure for the queue is an array. and I use pop(). O(n)
            s++;
            [a[s],a[i]] = [a[i],a[s]];
        }
    }
    [a[l],a[s]] = [a[s],a[l]];
    return s;

}

function quick(a, s=0, e=a.length-1){
    if(s < e){
        let p = pirvot(a,s,e);
        quick(a,s,p-1);
        quick(a,p+1,e);
    }
    return a;
}

class Node {
    constructor(p, val){
        this.p = p;
        this.val = val;
    }
}

class PriorityQueue { //with a min binary heap
    constructor() {
        this.values = [];
    }

    getSize(){
        return this.values.length;
    }

    enqueue(p, val) {
        let newNode = new Node(val,p);
        //push value to the end
        this.values.push(newNode);
        console.log(this.values);
        //bubble up
        this.bubbleUp();
    }
    bubbleUp() {
        //most current element index
        let index = this.values.length - 1;
        const element = this.values[index];

        //compare find index of parent and compare with it;
        while (index > 0) {//if not break below, it reaches top, with index 0;
            let prarentIndex = Math.floor((index - 1) / 2); //<-heart of the bubbleup
            let parent = this.values[prarentIndex];
            console.log(`${element.p} ${parent.p}`);
            if (element.p >= parent.p)
                break;
            //if current element is greater, swap
            this.values[prarentIndex] = element;
            this.values[index] = parent;           
            //update index for keep checking up steam.  
            index = prarentIndex     
        }
    }

    dequeue() {
        const min = this.values[0];
        const end = this.values.pop();
        if(this.values.length > 0){
            this.values[0] = end;
            this.sinkDown();
        }
        return min;
    }
    sinkDown(){
        let idx = 0;
        const length = this.values.length;
        const element = this.values[0];
        while(true){
            let leftChildIdx = 2 * idx + 1;
            let rightChildIdx = 2 * idx + 2;
            let rightChild, leftChild;
            let swap = null;

            if(leftChildIdx < length){
                leftChild = this.values[leftChildIdx];
                if(leftChild.p < element.p){
                    swap = leftChildIdx;
                }
            }

            if(rightChildIdx < length){
                rightChild = this.values[rightChildIdx];
                if(
                    (swap === null && rightChild.p < element.p) || 
                    (swap !== null && rightChild.p < leftChild.p)
                ){
                    swap = rightChildIdx;
                }
            }

            if(swap === null) break;
            this.values[idx] = this.values[swap];
            this.values[swap] = element;
            idx = swap;
        }
    }
}
/*
class SimplePriorityQueue { //use it whenever needed a fast prototype.
    constructor() {
        this.values = [];
    }
    
    enqueue(val, p) {
        let newNode = new Node(p, val);
        this.values.push(newNode);
        this.sort();
    }

    dequeue(){
        return this.values.pop(); //quick sort desening therefore .pop()  O(1)
    }

    sort(){
        //this.values.sort((a,b) => a.priority - b.priority); //sprt function by priority       
        //update to quick sort here for faster sort best O(log n) -> O(n^2) worst
        quick(this.values);
    }
}*/

class SimpleWeightedGraph {
    constructor() {
        this.adjacencyList = {};
    }
    addVertex(vertex){
        if(!this.adjacencyList[vertex]) this.adjacencyList[vertex] = [];
    }
    addEdge(vertex1,vertex2, weight){
        this.adjacencyList[vertex1].push({node:vertex2,weight});
        this.adjacencyList[vertex2].push({node:vertex1,weight});
    }

    dijkstra(startVertex, endVertex){
        let nodesPriority = new PriorityQueue(); //whatever pops from it expected to be smallest. min-Priority Queue
        let distances  = {}; //sort current shortest distances from whatever starting point.
        let previous   = {}; //{ this node: node came from}.
        let graph      = this.adjacencyList;
        let path       = [];
        let smallestNodeInQueue;

        //initialize everything to infinity, in distances map and priority queue. but set starting vertex to 0.
        for(let eachVertex in graph){
            if(eachVertex === startVertex){
                distances[eachVertex] = 0;
                nodesPriority.enqueue(eachVertex,0);    
            }
            else{
                distances[eachVertex] = Infinity;
                nodesPriority.enqueue(eachVertex,Infinity);
            }
            previous[eachVertex] = null; // nothing is being visited, no previous at the start.
        }

        //as long as the queue has node in it, travsal is not finish.
        // nodesPriority.values.length ... its too simple pQ, therefore no methods keeping track the length, just call it directly..
        while(nodesPriority.values.length){
            smallestNodeInQueue = nodesPriority.dequeue().val;

            if(smallestNodeInQueue === endVertex){
                //DONE trace back the nodes and return the array.           
                break;
            }
            //console.log(`at -: ${smallestNodeInQueue}`);
            if(smallestNodeInQueue || distances[smallestNodeInQueue] !== Infinity){
                for(let neighbourIndex in graph[smallestNodeInQueue]){
                    let neighbour       = graph[smallestNodeInQueue][neighbourIndex];
                    let neighbourName   = neighbour.node;
                    let neighbourWeight = neighbour.weight;
                    //console.log(`${neighbourName} -: ${neighbourWeight}`);
                    //calculate distances from starting node to neighoring node:
                    let candidate = distances[smallestNodeInQueue] + neighbourWeight;            
                    if(candidate < distances[neighbourName]){
                        //updating new smallest distance to neighbour
                        distances[neighbourName] = candidate;
                        //update how we got to neighhbor.
                        previous[neighbourName]  = smallestNodeInQueue;
                        nodesPriority.enqueue(neighbourName,candidate);
                    }
                }
            }
        }


        //backtracing the path back to start
        while(previous[smallestNodeInQueue]){
            path.push(smallestNodeInQueue);
            smallestNodeInQueue = previous[smallestNodeInQueue];
        }
        path.push(startVertex); //<-- start does not has a before. add it back in to complete the path!
        return path.reverse(); 
    }
}

let g = new SimpleWeightedGraph();
// let q = new PriorityQueue();
// q.enqueue("A",300);
// q.enqueue("B",50);
// q.enqueue("C",200);
// q.enqueue("D",10);
// q.enqueue("E",100);
// q.enqueue("F",5);



g.addVertex("A");
g.addVertex("B");
g.addVertex("C");
g.addVertex("D");
g.addVertex("E");
g.addVertex("F");

g.addEdge("A","B", 4);
g.addEdge("A","C", 2);
g.addEdge("B","E", 3);
g.addEdge("C","D", 2);
g.addEdge("C","F", 4);
g.addEdge("D","E", 3);
g.addEdge("D","F", 1);
g.addEdge("E","F", 1);

console.log(g.dijkstra("A", "E"));
